name: Create PR

on:
  workflow_call:
    inputs:
      target_repo:
        required: true
        type: string
      target_branch:
        required: true
        type: string
      commit_message:
        required: true
        type: string
      file_path:
        required: true
        type: string
      watched_keys:
        required: true
        type: string
    secrets:
      token:
        required: true

jobs:
  create-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout target repo
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.target_repo }}
          token: ${{ secrets.token }}
          ref: ${{ inputs.target_branch }}


      - name: Save old file version
        run: |
          if [ -f "${{ inputs.file_path }}" ]; then
            cp "${{ inputs.file_path }}" old.yml
          else
            echo "{}" > old.yml
          fi


      - name: Save new file version
        run: |
          cp "${{ inputs.file_path }}" new.yml
          

      - name: 🔍 Show watched key values from gym_buddy (new.yml)
        run: |
          pip install pyyaml --quiet
          python3 <<EOF
          import yaml

          def get_nested(data, key_path):
              keys = key_path.strip().split(".")
              for key in keys:
                  if isinstance(data, dict) and key in data:
                      data = data[key]
                  else:
                      return None
              return data

          with open("new.yml") as f:
              data = yaml.safe_load(f) or {}

          watched_keys = yaml.safe_load("""${{ inputs.watched_keys }}""")

          print("📦 Gym Buddy values:")
          for top_key, sub_keys in watched_keys.items():
              for sub_key in sub_keys:
                  val = get_nested(data, f"{top_key}.{sub_key}")
                  print(f"➡️  {top_key}.{sub_key} = {val}")
          EOF

      - name: 📨 Show watched key values from Mail_bot (old.yml)
        run: |
          pip install pyyaml --quiet
          python3 <<EOF
          import yaml

          def get_nested(data, key_path):
              keys = key_path.strip().split(".")
              for key in keys:
                  if isinstance(data, dict) and key in data:
                      data = data[key]
                  else:
                      return None
              return data

          with open("old.yml") as f:
              data = yaml.safe_load(f) or {}

          watched_keys = yaml.safe_load("""${{ inputs.watched_keys }}""")

          print("📬 Mail Bot values:")
          for top_key, sub_keys in watched_keys.items():
              for sub_key in sub_keys:
                  val = get_nested(data, f"{top_key}.{sub_key}")
                  print(f"➡️  {top_key}.{sub_key} = {val}")
          EOF
          
      - name: 👁️ View parsed watched keys
        run: |
          pip install pyyaml --quiet
          python3 <<EOF
          import yaml
          watched_keys_yaml = """${{ inputs.watched_keys }}"""
          watched_keys = yaml.safe_load(watched_keys_yaml)
          print("🗝️ Watched Keys:")
          for k, v in watched_keys.items():
              print(f"  {k}: {v}")
          EOF


      - name: Compare watched keys using Python
        id: check_keys
        run: |
          echo "Comparing watched keys..."
          pip install pyyaml --quiet

          python3 <<EOF
          import yaml
          import os

          def get_nested(data, key_path):
              keys = key_path.strip().split(".")
              for key in keys:
                  if isinstance(data, dict) and key in data:
                      data = data[key]
                  else:
                      return None
              return data

          with open("old.yml") as f:
              old = yaml.safe_load(f) or {}

          with open("new.yml") as f:
              new = yaml.safe_load(f) or {}

          watched_keys_yaml = """${{ inputs.watched_keys }}"""
          watched_keys = yaml.safe_load(watched_keys_yaml)

          changed = []

          for top_level_key, sub_keys in watched_keys.items():
              for sub_key in sub_keys:
                  path = f"{top_level_key}.{sub_key}"
                  old_val = get_nested(old, path)
                  new_val = get_nested(new, path)
                  if old_val != new_val:
                      print(f"🔺 Changed: {path} — '{old_val}' → '{new_val}'")
                      changed.append(path)

          if changed:
              with open(os.environ["GITHUB_OUTPUT"], "a") as out:
                  out.write("no_change=false\n")
          else:
              print("✅ No watched keys changed.")
              with open(os.environ["GITHUB_OUTPUT"], "a") as out:
                  out.write("no_change=true\n")
          EOF
      

      - name: Exit if no relevant changes
        if: steps.check_keys.outputs.no_change == 'true'
        run: |
          echo "✅ No watched keys changed. Skipping PR."
          exit 0

      - name: Commit and push changes
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add "${{ inputs.file_path }}" || echo "⚠️ Nothing to add"
          git diff --cached --quiet || git commit -m "${{ inputs.commit_message }}"
          git push


      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.token }}
          commit-message: ${{ inputs.commit_message }}
          title: "Automated PR from workflow"
          body: "This PR was created automatically because watched keys were updated."
          branch: auto/pr-${{ github.run_id }}
