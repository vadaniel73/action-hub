name: Create PR

on:
  workflow_call:
    inputs:
      target_repo:
        required: true
        type: string
      target_branch:
        required: true
        type: string
      commit_message:
        required: true
        type: string
      file_path:
        required: true
        type: string
      watched_exports_usd:
        required: true
        type: string
      watched_outlook:
        required: true
        type: string
    secrets:
      token:
        required: true

jobs:
  create-pr:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout target repo
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.target_repo }}
          token: ${{ secrets.token }}
          ref: ${{ inputs.target_branch }}

      - name: 🔍 Compare watched keys and print values
        id: compare_keys
        run: |
          echo "📥 Installing ruamel.yaml..."
          pip install ruamel.yaml --quiet

          echo "🔍 Fetching and comparing values..."
          python3 <<EOF
          from ruamel.yaml import YAML
          import os

          def get_nested(data, key_path):
              keys = key_path.strip().split(".")
              for key in keys:
                  if isinstance(data, dict) and key in data:
                      data = data[key]
                  else:
                      return None
              return data

          yaml = YAML()
          yaml.preserve_quotes = True

          file_path = "${{ inputs.file_path }}"
          with open(file_path) as f:
              mail_data = yaml.load(f) or {}

          # Incoming values from gym_buddy
          gym_exports = """${{ inputs.watched_exports_usd }}"""
          gym_outlook = """${{ inputs.watched_outlook }}"""

          # Values in Mail_bot
          mail_exports = get_nested(mail_data, "trade.exports_usd")
          mail_outlook = get_nested(mail_data, "summary.outlook")

          print("\n📊 Watched Keys:")
          print(f"➡️ gym_buddy: trade.exports_usd = {gym_exports}")
          print(f"➡️ Mail_bot : trade.exports_usd = {mail_exports}")
          print(f"➡️ gym_buddy: summary.outlook   = {gym_outlook}")
          print(f"➡️ Mail_bot : summary.outlook   = {mail_outlook}\n")

          changes = []

          if gym_exports != str(mail_exports):
              print("🔺 Detected change in: trade.exports_usd")
              changes.append("trade.exports_usd")

          if gym_outlook != str(mail_outlook):
              print("🔺 Detected change in: summary.outlook")
              changes.append("summary.outlook")

          if changes:
              print(f"✅ Changes detected: {changes}")
              with open(os.environ["GITHUB_OUTPUT"], "a") as f:
                  f.write("no_change=false\n")
          else:
              print("✅ No changes in watched keys.")
              with open(os.environ["GITHUB_OUTPUT"], "a") as f:
                  f.write("no_change=true\n")
          EOF

      - name: 🚫 Skip PR creation if no changes
        if: steps.compare_keys.outputs.no_change == 'true'
        run: echo "✅ No changes detected. Skipping file update and PR."

      - name: 🪄 Create new branch
        if: steps.compare_keys.outputs.no_change == 'false'
        run: |
          echo "🔢 Creating new branch with incremental name..."
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git fetch origin

          MAX=$(git ls-remote --heads origin "refs/heads/value_change_gym_*" \
            | sed 's|.*/value_change_gym_||' \
            | sort -n \
            | tail -n 1)

          if [[ -z "$MAX" ]]; then
            NEXT=1
          else
            NEXT=$((MAX + 1))
          fi

          BRANCH_NAME="value_change_gym_${NEXT}"
          echo "🆕 New branch: $BRANCH_NAME"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

          git checkout -b "$BRANCH_NAME"

      - name: ✍️ Update YAML and push changes
        if: steps.compare_keys.outputs.no_change == 'false'
        run: |
          echo "📦 Updating YAML file with new values..."
          pip install ruamel.yaml --quiet
      
          python3 <<EOF
          from ruamel.yaml import YAML
          from pathlib import Path
      
          yaml = YAML()
          yaml.preserve_quotes = True
      
          file_path = Path("${{ inputs.file_path }}")
          data = yaml.load(file_path)
      
          # Update values
          data.setdefault("trade", {})["exports_usd"] = """${{ inputs.watched_exports_usd }}"""
          data.setdefault("summary", {})["outlook"] = """${{ inputs.watched_outlook }}"""
      
          yaml.dump(data, file_path)
          EOF
      
          echo "📂 Committing and pushing to $BRANCH_NAME..."
          git add "${{ inputs.file_path }}"
          git commit -m "${{ inputs.commit_message }}"
          git push --set-upstream origin "$BRANCH_NAME"
      
          echo "📄 Final YAML file after update:"
          cat "${{ inputs.file_path }}"

      - name: Create PR
        run: gh pr create --base ${{ inputs.target_branch }} --head ${{ env.BRANCH_NAME }} --title "Auto-PR" --body "Generated by CI"
        env:
          GH_TOKEN: ${{ secrets.token }}


      - name: 🔍 Analyze Pull Request
        if: steps.create_pr.outputs.pull-request-url != ''
        id: analyze_pr
        env:
          GH_TOKEN: ${{ secrets.token }}
        run: |
          echo "📎 Pull Request URL: ${{ steps.create_pr.outputs.pull-request-url }}"
          PR_URL="${{ steps.create_pr.outputs.pull-request-url }}"
          PR_NUMBER=$(echo "$PR_URL" | grep -oE '[0-9]+$')
          echo "🔢 PR Number: $PR_NUMBER"

          echo "🔍 Fetching details of PR #$PR_NUMBER..."

          gh pr view "$PR_NUMBER" --json title,body,files,author,headRefName,baseRefName --jq '
            "📋 Title: \(.title)\n" +
            "✍️ Author: \(.author.login)\n" +
            "🔀 Branches: \(.headRefName) -> \(.baseRefName)\n" +
            "📝 Body:\n\(.body // "No description")\n" +
            "🗂️ Changed Files:\n" +
            (.files | map(" - \(.path)") | join("\n"))
          '




