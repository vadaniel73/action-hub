name: Synchronize Changes from key

on:
  workflow_call:
    inputs:
      target_repo:
        required: true
        type: string
      target_branch:
        required: true
        type: string
      commit_message:
        required: true
        type: string
      file_path:
        required: true
        type: string
      watched_population:
        required: true
        type: string
      watched_agriculture_gdp:
        required: true
        type: string
      watched_industry_gdp:
        required: true
        type: string
      watched_fdi_inflow:
        required: true
        type: string
    secrets:
      token:
        required: true

jobs:
  sync-data:
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout target repo
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.target_repo }}
          token: ${{ secrets.token }}
          ref: ${{ inputs.target_branch }}
          fetch-depth: 0

      - name: üîç Compare and Update Values
        id: sync_values
        run: |
          pip install ruamel.yaml --quiet
          
          python3 <<EOF
          from ruamel.yaml import YAML
          import os

          # Input names must match workflow_call inputs exactly
          INPUT_MAP = {
              'population': '${{ inputs.watched_population }}',
              'agriculture_gdp': '${{ inputs.watched_agriculture_gdp }}',
              'industry_gdp': '${{ inputs.watched_industry_gdp }}',
              'fdi_inflow': '${{ inputs.watched_fdi_inflow }}'
          }

          TARGET_MAP = {
              'population': 'overview.population',
              'agriculture_gdp': 'sectors.agriculture.contribution_to_gdp',
              'industry_gdp': 'sectors.industry.contribution_to_gdp',
              'fdi_inflow': 'fdi.inflow_usd'
          }

          yaml = YAML()
          yaml.preserve_quotes = True
          yaml.width = 4096

          with open("${{ inputs.file_path }}") as f:
              target_data = yaml.load(f) or {}

          changes = []
          for input_key, target_path in TARGET_MAP.items():
              source_value = INPUT_MAP[input_key]
              keys = target_path.split('.')
              current = target_data
              for key in keys[:-1]:
                  current = current.setdefault(key, {})
              
              current_value = current.get(keys[-1], "")
              
              if source_value != str(current_value):
                  current[keys[-1]] = source_value
                  changes.append(target_path)

          if changes:
              with open("${{ inputs.file_path }}", "w") as f:
                  yaml.dump(target_data, f)
              print(f"Updated: {', '.join(changes)}")
          
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"changes={','.join(changes) if changes else 'none'}\n")
              f.write(f"no_change={'true' if not changes else 'false'}\n")
          EOF


      - name: üö´ Skip if no changes
        if: steps.sync_values.outputs.no_change == 'true'
        run: echo "‚úÖ All values up-to-date"

      - name: üè∑Ô∏è Create Cert Update Branch
        if: steps.sync_values.outputs.no_change == 'false'
        id: branch_name
        run: |
          MAX=$(git ls-remote --heads origin "refs/heads/GHA_cert_update_*" | 
                awk -F'GHA_cert_update_' '{print $2}' | 
                sort -n | tail -n 1)
          NEXT=$(( ${MAX:-0} + 1 ))
          echo "BRANCH_NAME=GHA_cert_update_$NEXT" >> $GITHUB_OUTPUT
          git checkout -b "GHA_cert_update_$NEXT"

      - name: üìå Commit and push changes
        if: steps.sync_values.outputs.no_change == 'false'
        run: |
          git config --global user.email "github-actions@cert-update.com"
          git config --global user.name "Certificate Bot"
          git add "${{ inputs.file_path }}"
          git commit -m "${{ inputs.commit_message }}"
          git push origin "${{ steps.branch_name.outputs.BRANCH_NAME }}"

      - name: üéâ Create Certificate PR
        if: steps.sync_values.outputs.no_change == 'false'
        run: |
          # 1. Get country name with proper Python syntax
          COUNTRY=$(python3 -c "import yaml; d=yaml.safe_load(open('${{ inputs.file_path }}'); print(d.get('country', 'GLOBAL'))")
          # 2. Rest of your PR creation logic...
          CHANGED_LABELS="GHA_cert,"$(echo '${{ steps.sync_values.outputs.changes }}' | 
                        sed 's/overview.population/population/g;
                             s/sectors.agriculture.contribution_to_gdp/agriculture/g;
                             s/sectors.industry.contribution_to_gdp/industry/g;
                             s/fdi.inflow_usd/inflow/g')

          gh pr create \
            --base "${{ inputs.target_branch }}" \
            --head "${{ steps.branch_name.outputs.BRANCH_NAME }}" \
            --title "üîÑ GHA_cert update for $COUNTRY" \
            --label "$CHANGED_LABELS"
        env:
          GH_TOKEN: ${{ secrets.token }}