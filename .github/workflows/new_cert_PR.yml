name: Synchronize Economic Data

on:
  workflow_call:
    inputs:
      target_repo:
        required: true
        type: string
      target_branch:
        required: true
        type: string
      commit_message:
        required: true
        type: string
      file_path:
        required: true
        type: string
      # Only the 4 required variables
      watched_population:
        required: true
        type: string
      watched_agriculture_gdp:
        required: true
        type: string
      watched_industry_gdp:
        required: true
        type: string
      watched_fdi_inflow:
        required: true
        type: string
    secrets:
      token:
        required: true

jobs:
  sync-data:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout target repo
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.target_repo }}
          token: ${{ secrets.token }}
          ref: ${{ inputs.target_branch }}
          fetch-depth: 0

      - name: 🔍 Compare and Update Values
        id: sync_values
        run: |
          pip install ruamel.yaml --quiet
          
          python3 <<EOF
          from ruamel.yaml import YAML
          import os

          # Embedded key mapping for the 4 variables
          KEY_MAPPING = {
              'watched_population': 'overview.population',
              'watched_agriculture_gdp': 'sectors.agriculture.contribution_to_gdp',
              'watched_industry_gdp': 'sectors.industry.contribution_to_gdp',
              'watched_fdi_inflow': 'fdi.inflow_usd'
          }

          yaml = YAML()
          yaml.preserve_quotes = True
          yaml.width = 4096

          # Load target file
          with open("${{ inputs.file_path }}") as f:
              target_data = yaml.load(f) or {}

          changes = []
          for input_name, target_path in KEY_MAPPING.items():
              # Get source value from workflow inputs
              source_value = os.environ[f'INPUT_{input_name.upper()}']
              
              # Navigate target nested structure
              keys = target_path.split('.')
              current = target_data
              for key in keys[:-1]:
                  current = current.setdefault(key, {})
              
              current_value = current.get(keys[-1], "")
              
              if str(source_value) != str(current_value):
                  current[keys[-1]] = source_value
                  changes.append(target_path)

          # Save changes if any
          if changes:
              with open("${{ inputs.file_path }}", "w") as f:
                  yaml.dump(target_data, f)
              print(f"🔁 Updated fields: {', '.join(changes)}")
          
          # Set outputs
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"changes={','.join(changes) if changes else 'none'}\n")
              f.write(f"no_change={'true' if not changes else 'false'}\n")
          EOF

      - name: 🚫 Skip if no changes
        if: steps.sync_values.outputs.no_change == 'true'
        run: echo "✅ All values up-to-date"

      - name: 🪄 Create update branch
        if: steps.sync_values.outputs.no_change == 'false'
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          BRANCH_NAME="brazil-data-update-$(date +%s)"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          git checkout -b "$BRANCH_NAME"

      - name: 📌 Commit and push changes
        if: steps.sync_values.outputs.no_change == 'false'
        run: |
          git add "${{ inputs.file_path }}"
          git commit -m "${{ inputs.commit_message }}"
          git push origin "$BRANCH_NAME"

      - name: 🎉 Create Pull Request
        if: steps.sync_values.outputs.no_change == 'false'
        run: |
          gh pr create \
            --base "${{ inputs.target_branch }}" \
            --head "$BRANCH_NAME" \
            --title "🇧🇷 Brazil Data Update: ${{ inputs.commit_message }}" \
            --body "Automated synchronization of economic indicators\n\nUpdated fields:\n- $(echo '${{ steps.sync_values.outputs.changes }}' | sed 's/,/\n-/g')"
        env:
          GH_TOKEN: ${{ secrets.token }}